@using DomainModels
@inject NavigationManager Navigation

<nav class="flex" aria-label="Breadcrumb">
    <ol class="inline-flex items-center space-x-1">
        <li class="inline-flex items-center">
            <a href="/" class="mt-1 inline-flex items-center font-medium text-gray-700 hover:text-indigo-600 cursor-pointer">
                <i class="fas fa-home text-lg"></i>
            </a>
        </li>
        @foreach (var item in BreadcrumbItems)
        {
            <li class="inline-flex items-center pt-2">
                <i class="fas fa-chevron-right mr-4 ml-4 text-gray-900"></i>
                @if (item.IsCurrent)
                {
                    <span class="text-sm font-medium text-gray-900 hover:text-indigo-600 cursor-pointer">@item.Title</span>
                }
                else
                {
                    <a href="@item.Url" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-indigo-600 hover:font-bold cursor-pointer">
                        @item.Title
                    </a>
                }
            </li>
        }
    </ol>
</nav>

@code {
    [CascadingParameter] public string? CurrentUri { get; set; }

    private List<BreadcrumbItem> BreadcrumbItems { get; set; } = new List<BreadcrumbItem>();

    protected override void OnParametersSet()
    {
        BuildBreadcrumbs();
    }

    private void BuildBreadcrumbs()
    {
        BreadcrumbItems.Clear();
        if (CurrentUri is null) return;

        var segments = Navigation.ToBaseRelativePath(CurrentUri).Split('/', StringSplitOptions.RemoveEmptyEntries);
        var currentUrl = "/";

        for (int i = 0; i < segments.Length; i++)
        {
            var segment = segments[i];
            var isLastSegment = (i == segments.Length - 1);

            // Check if this segment is a GUID, which indicates a code-base detail page
            if (Guid.TryParse(segment, out var guid))
            {
                // If this is a code-base detail, replace the segment with the appropriate text
                currentUrl += guid.ToString() + "/";

                BreadcrumbItems.Add(new BreadcrumbItem
                {
                    Title = "Detail",
                    Url = currentUrl,
                    IsCurrent = isLastSegment
                });
            }
            else
            {
                currentUrl += segment + "/";
                Links.SegmentAliases.TryGetValue(segment, out var alias);
                alias ??= segment;

                BreadcrumbItems.Add(new BreadcrumbItem
                {
                    Title = alias,
                    Url = currentUrl,
                    IsCurrent = isLastSegment
                });
            }
        }
    }

    public class BreadcrumbItem
    {
        public string Title { get; set; }
        public string Url { get; set; }
        public bool IsCurrent { get; set; }
    }
}
