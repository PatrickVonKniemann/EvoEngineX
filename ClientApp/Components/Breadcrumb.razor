@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager Navigation
@implements IDisposable

<nav class="flex" aria-label="Breadcrumb">
    <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
            <a href="/" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-indigo-600 cursor-pointer">
                <i class="fas fa-home"></i>
            </a>
        </li>
        @foreach (var item in BreadcrumbItems)
        {
            <li class="inline-flex items-center">
                <i class="fas fa-chevron-right ml-2 mr-2 text-gray-900"></i>
                @if (item.IsCurrent)
                {
                    <span class="ml-1 text-sm font-medium text-gray-900 md:ml-2 hover:text-indigo-600  cursor-pointer">@item.Title</span>
                }
                else
                {
                    <a href="@item.Url" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-indigo-600  cursor-pointer">
                        @item.Title
                    </a>
                }
            </li>
        }
    </ol>
</nav>

@code {
    private List<BreadcrumbItem> BreadcrumbItems { get; set; } = new List<BreadcrumbItem>();

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        BuildBreadcrumbs();
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        BuildBreadcrumbs();
    }

    private void BuildBreadcrumbs()
    {
        BreadcrumbItems.Clear();
        var segments = Navigation.ToBaseRelativePath(Navigation.Uri).Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (segments.Length > 0)
        {
            var currentUrl = "/";
            foreach (var segment in segments)
            {
                currentUrl += segment + "/";
                BreadcrumbItems.Add(new BreadcrumbItem
                {
                    Title = segment,
                    Url = currentUrl,
                    IsCurrent = (currentUrl == Navigation.ToBaseRelativePath(Navigation.Uri) + "/")
                });
            }
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    public class BreadcrumbItem
    {
        public string Title { get; set; }
        public string Url { get; set; }
        public bool IsCurrent { get; set; }
    }

}