@using ClientApp.Services
<!-- Components/Toast.razor -->
@inject ToastService ToastService

<div class="fixed bottom-4 right-4" style="z-index: 9999;" @onmouseenter="PauseTimer">
    @if (IsVisible)
    {
        <div class="@ToastCssClass">
            <div class="flex items-center">
                <div class="p-3">
                    <strong class="text-lg">@Message</strong>
                </div>
                <button class="ml-auto p-3 text-lg font-bold" @onclick="HideToast">&times;</button>
            </div>
        </div>
    }
</div>

@code {
    private string Message { get; set; }
    private bool IsVisible { get; set; }
    private string ToastCssClass { get; set; }
    private int Timeout { get; set; } = 5000; // Toast display duration
    private Task _timerTask;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideToast;
    }

    private void ShowToast(string message, string type)
    {
        Message = message;
        IsVisible = true;

        ToastCssClass = type switch
        {
            "success" => "bg-green-500 text-white rounded-lg shadow-lg p-4",
            "error" => "bg-red-500 text-white rounded-lg shadow-lg p-4",
            "info" => "bg-blue-500 text-white rounded-lg shadow-lg p-4",
            _ => "bg-gray-500 text-white rounded-lg shadow-lg p-4",
        };

        _timerTask = HideAfterTimeout();
        StateHasChanged();
    }

    private async Task HideAfterTimeout()
    {
        await Task.Delay(Timeout);
        HideToast();
    }

    private void HideToast()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private void PauseTimer()
    {
        // Prevent the toast from disappearing while hovered
        _timerTask = Task.CompletedTask;
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
        ToastService.OnHide -= HideToast;
    }
}