@using Generics.Enums
<nav aria-label="Progress" class="w-full">
    <ol class="flex items-center space-x-4">
        @foreach (var step in ProgressSteps)
        {
            <li class="flex items-center">
                @switch (step.Status)
                {
                    case RunStatus.Done:
                        <span class="inline-flex items-center text-sm font-medium text-indigo-500 cursor-pointer">
                            <i class="fas fa-circle-check text-indigo-500 mr-1"></i>@step.Title
                        </span>;
                        break;

                    case RunStatus.PausedRunning:
                    case RunStatus.PausedValidating:
                        <span class="inline-flex items-center text-sm font-medium text-yellow-600 cursor-pointer">
                            <i class="fas fa-pause-circle text-yellow-600 mr-1"></i>Paused
                        </span>;
                        break;

                    case RunStatus.Running:
                    case RunStatus.Validating:
                        <span class="inline-flex items-center text-sm font-medium text-indigo-600 cursor-pointer">
                            <Spinner Size="h-4 w-4" AdditionalClasses="border-indigo-600 mr-1" LoadingText=""/>
                        </span>;
                        break;

                    case RunStatus.Ready when IsCurrentStep(step):
                        <span class="inline-flex items-center text-sm font-medium text-gray-400 cursor-pointer">
                            <Spinner Size="h-4 w-4" AdditionalClasses="border-indigo-600 mr-1" LoadingText=""/>
                        </span>;
                        break;

                    default:
                        <span class="inline-flex items-center text-sm font-medium text-gray-400 cursor-pointer">
                            <i class="fas fa-circle text-gray-400 mr-1"></i>@step.Title
                        </span>;
                        break;
                }
            </li>

            @if (step != ProgressSteps.Last())
            {
                <li class="flex items-center justify-center">
                    <i class="fas fa-chevron-right text-gray-900"></i>
                </li>
            }
        }
    </ol>
</nav>

@code {
    [Parameter] public RunStatus ParentRunStatus { get; set; } // This parameter comes from the parent component

    private List<ProgressStep> ProgressSteps { get; set; } = new();

    protected override void OnParametersSet()
    {
        BuildProgressSteps();
    }

    private void BuildProgressSteps()
    {
        ProgressSteps.Clear();

        switch (ParentRunStatus)
        {
            case RunStatus.Done:
                AddSteps(RunStatus.Done, RunStatus.Done, RunStatus.Done, RunStatus.Done);
                break;

            case RunStatus.Running:
                AddSteps(RunStatus.Done, RunStatus.Done, RunStatus.Running, RunStatus.Ready);
                break;

            case RunStatus.PausedRunning:
                AddSteps(RunStatus.Done, RunStatus.Done, RunStatus.PausedRunning, RunStatus.Ready);
                break;

            case RunStatus.PausedValidating:
                AddSteps(RunStatus.PausedValidating, RunStatus.Ready, RunStatus.Ready, RunStatus.Ready);
                break;

            case RunStatus.Ready:
                AddSteps(RunStatus.Done, RunStatus.Ready, RunStatus.Ready, RunStatus.Ready);
                break;

            case RunStatus.Validating:
                AddSteps(RunStatus.Validating, RunStatus.Ready, RunStatus.Ready, RunStatus.Ready);
                break;

            default:
                AddSteps(RunStatus.Ready, RunStatus.Ready, RunStatus.Ready, RunStatus.Ready);
                break;
        }
    }

    private void AddSteps(RunStatus validating, RunStatus ready, RunStatus running, RunStatus done)
    {
        ProgressSteps.Add(new ProgressStep { Title = "Valid", Status = validating });
        ProgressSteps.Add(new ProgressStep { Title = "Ready", Status = ready });
        ProgressSteps.Add(new ProgressStep { Title = "Running", Status = running });
        ProgressSteps.Add(new ProgressStep { Title = "Done", Status = done });
        ProgressSteps.Last().IsLast = true;
    }

    private bool IsCurrentStep(ProgressStep step)
    {
        var currentStepIndex = ProgressSteps.FindIndex(s => s.Status == ParentRunStatus);
        var stepIndex = ProgressSteps.IndexOf(step);
        return currentStepIndex == stepIndex;
    }

    public class ProgressStep
    {
        public string Title { get; set; }
        public RunStatus Status { get; set; }
        public bool IsLast { get; set; } = false;
    }
}
