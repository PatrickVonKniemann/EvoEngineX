@page "/admin"
@inject UserService UserService
@using ClientApp.Services
@using DomainModels
@using ExternalDomainEntities.UserDto.Query
@using ClientApp.Components
@using ButtonType = DomainModels.ButtonType

<PageTitle>Admin</PageTitle>


@if (_users == null)
{
    <p>Loading...</p>
}
else
{
    <div class="relative overflow-x-auto">
        <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase">
            <tr>
                <th scope="col" class="px-6 py-3">
                    User Name
                </th>
                <th scope="col" class="px-6 py-3">
                    Name
                </th>
                <th scope="col" class="px-6 py-3">
                    Email
                </th>
                <th scope="col" class="px-6 py-3">
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in _users.Items.Values)
            {
                <tr class="bg-white border-b text-gray-950">
                    <th scope="row" class="px-6 py-4 font-medium whitespace-nowrap">
                        @user.UserName
                    </th>
                    <td class="px-6 py-4">
                        @user.Name
                    </td>
                    <td class="px-6 py-4">
                        @user.Email
                    </td>
                    <td class="px-6 py-4">
                        <BasicButton ButtonType=@ButtonType.secondary ButtonText="Detail" Link=@Links.UserDetail/>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <Pagination
        PageNumber="@_users.Pagination.PageNumber"
        TotalPages="@_users.Pagination.TotalPages"
        OnPageChanged="HandlePageChanged"/>
}

@code {
    private ReadUserListResponse? _users;

    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _users = await UserService.GetDataAsync(currentPage, pageSize);
    }

    private async Task HandlePageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        await LoadDataAsync();
    }

}