@page "/code-base/{codeBaseId}"
@inject IJSRuntime JsRuntime
@inject CodeFormatService CodeFormatService
@inject CodeBaseService CodeBaseService
@inject NotificationService NotificationService
@inject CodeRunService CodeRunService
@using ClientApp.Services
@using ExternalDomainEntities.CodeRunDto.Query
@using ClientApp.Components.Common
@using ExternalDomainEntities.CodeBaseDto.Query
@using ExternalDomainEntities.CodeBaseDto.Command
@using ExternalDomainEntities.CodeRunDto.Command
@using Helpers

<PageTitle>CodeBase Detail Page</PageTitle>

@if (_codeRuns == null)
{
    <Spinner Size="h-16 w-16 mt-5 pt-5" AdditionalClasses="border-indigo-500" LoadingText=""/>
}
else
{
    <div class="overflow-x-auto">
        <div class="max-h-fit overflow-y-auto">
            <div class="inline-flex">
                <p class="m-3 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Your code</p>
                <h2 class="m-3 text-base font-semibold leading-7 "><span class="text-indigo-600">@_codeBase.Name</span> / <span class="text-indigo-900">@_codeBase.SupportedPlatform</span></h2>
            </div>
            <CodeEditor InitialCode="@_codeBase?.Code" OnCodeChange="HandleCodeChange" OnCodeFormat="HandleCodeFormat" PlatformLanguage=@_codeBase.SupportedPlatform.ToString().ToLower()/>
            <div class="text-sm text-gray-600 bg-gray-100 pl-2 rounded italic">
                @CodeFormatHelper.GetInformationText(_codeBase.SupportedPlatform.ToString().ToLower())
            </div>
            <div class="my-8">
                <button class="primary-gradient cursor-pointer text-center mx-3 px-6 py-4 text-white font-bold rounded-lg" @onclick="HandleRunChanged" disabled="@_isRunning">
                    @if (_isRunning)
                    {
                        <span>...</span>
                    }
                    else
                    {
                        <span>Run </span>
                    }
                </button>
                <button class="secondary-basic cursor-pointer text-center mx-3 px-6 py-4 text-white font-bold rounded-lg" @onclick="HandleSaveChanged" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <span>.... </span>
                    }
                    else
                    {
                        <span>Save </span>
                    }
                </button>
            </div>
            <CodeRunTable CodeRuns="_codeRuns"/>
            <Pagination PageNumber="@_codeRuns.Pagination.PageNumber" TotalPages="@_codeRuns.Pagination.TotalPages" OnPageChanged="HandlePageChanged"/>
        </div>
    </div>
}

@code {
    [Parameter] public required string CodeBaseId { get; set; }

    private ReadCodeRunListByCodeBaseIdResponse? _codeRuns;
    private int _currentPage = 1;
    private const int PageSize = 10;
    private ReadCodeBaseResponse? _codeBase;
    private bool _isRunning;
    private bool _isSaving;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        await LoadCodeBase();
        await LoadCodeRuns();
    }

    private async Task LoadCodeBase()
    {
        _codeBase = await CodeBaseService.GetEntityAsync(CodeBaseId);
        StateHasChanged();
    }

    private async Task LoadCodeRuns()
    {
        _codeRuns = await CodeRunService.GetDataAsync($"by-code-base-id/{CodeBaseId}", _currentPage, PageSize);
        StateHasChanged();
    }

    private async Task HandlePageChanged(int pageNumber)
    {
        _currentPage = pageNumber;
        await LoadCodeRuns();
    }

    private async Task HandleCodeChange(string newCode)
    {
        if (_codeBase != null)
        {
            _codeBase.Code = newCode;
            await InvokeAsync(StateHasChanged); // Ensures the component is re-rendered
        }
    }

    private async Task HandleCodeFormat(string codeToFormat)
    {
        if (!string.IsNullOrWhiteSpace(codeToFormat))
        {
            try
            {
                // Call the formatting service
                var formattedCode = await CodeFormatService.FormatCodeAsync(codeToFormat, _codeBase.SupportedPlatform.ToString());
                // Update the editor with the formatted code
                await JsRuntime.InvokeVoidAsync("setMonacoEditorValue", formattedCode);

                // Ensure Blazor state is also updated
                await HandleCodeChange(formattedCode);
            }
            catch (Exception ex)
            {
                NotificationService.ShowMessage($"Code formatting failed: {ex.Message}");
            }
        }
    }

    private async Task HandleRunChanged()
    {
        if (_codeBase != null && _codeBase.Code != null)
        {
            _isRunning = true;
            try
            {
                var newRun = new CreateCodeRunRequest
                {
                    CodeBaseId = _codeBase.Id,
                    Code = _codeBase.Code
                };
                await CodeFormatService.ValidateFormatAsync(_codeBase.Code, _codeBase.SupportedPlatform.ToString());
                await CodeRunService.AddEntityAsync(newRun);
                await LoadCodeRuns();
                await Task.Delay(2000); // Show the "Running..." message for 2 seconds
            }
            catch (Exception ex)
            {
                NotificationService.ShowMessage($"Code running failed: {ex.Message}");
            }
            finally
            {
                _isRunning = false;
            }
        }
    }

    private async Task HandleSaveChanged()
    {
        if (_codeBase != null)
        {
            _isSaving = true;
            try
            {
                var updateRequest = new UpdateCodeBaseRequest
                {
                    Id = _codeBase.Id,
                    Code = _codeBase.Code,
                    SupportedPlatform = _codeBase.SupportedPlatform,
                    UserId = _codeBase.UserId
                    // Map other necessary properties from _codeBase to updateRequest
                };

                await CodeBaseService.UpdateEntityAsync(CodeBaseId, updateRequest);
                await Task.Delay(2000); // Show the "Saved" message for 2 seconds
            }
            finally
            {
                _isSaving = false;
            }
        }
    }

}