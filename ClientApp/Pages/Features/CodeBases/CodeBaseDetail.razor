@page "/code-base/{codeBaseId}"
@inject CodeBaseService CodeBaseService
@inject CodeRunService CodeRunService
@using ClientApp.Services
@using ExternalDomainEntities.CodeRunDto.Query
@using ClientApp.Components
@using ExternalDomainEntities.CodeBaseDto.Query
@using ExternalDomainEntities.CodeBaseDto.Command
@using ExternalDomainEntities.CodeRunDto.Command
@using Generics.Enums

<PageTitle>CodeBase Detail Page</PageTitle>

@if (_codeRuns == null)
{
    <p>Loading...</p>
}
else
{
    <div class="overflow-x-auto">
        <div class="max-h-fit overflow-y-auto">
            <p class="m-3 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Your code</p>
            <CodeEditor InitialCode="@_codeBase?.Code" OnCodeChange="HandleCodeChange"></CodeEditor>
            <div class="my-8">
                <button class="primary-basic cursor-pointer text-center mx-3 px-6 py-4 text-white font-bold rounded-lg" @onclick="HandleRunChanged">
                    Run
                </button>
                <button class="secondary-basic cursor-pointer text-center mx-3 px-6 py-4 text-white font-bold rounded-lg" @onclick="HandleSaveChanged">
                    Save
                </button>
            </div>
            <h2 class="m-3 text-base font-semibold leading-7 text-indigo-600">Previous runs:</h2>
            <CodeBaseTable CodeRuns="@_codeRuns" GetColorByStatus="GetColorByStatus" />
        </div>
        <Pagination PageNumber="@_codeRuns.Pagination!.PageNumber" TotalPages="@_codeRuns.Pagination.TotalPages" OnPageChanged="HandlePageChanged"/>
    </div>
}

@code {
    [Parameter] public required string CodeBaseId { get; set; }
    private ReadCodeRunListByCodeBaseIdResponse? _codeRuns;
    private int _currentPage = 1;
    private const int PageSize = 10;
    private ReadCodeBaseResponse? _codeBase;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _codeRuns = await CodeRunService.GetDataAsync($"by-code-base-id/{CodeBaseId}", _currentPage, PageSize);
        _codeBase = await CodeBaseService.GetEntityAsync(CodeBaseId);
    }

    private async Task HandlePageChanged(int pageNumber)
    {
        _currentPage = pageNumber;
        await LoadDataAsync();
    }

    private async Task HandleCodeChange(string newCode)
    {
        if (_codeBase != null)
        {
            _codeBase.Code = newCode;
            await InvokeAsync(StateHasChanged); // Ensures the component is re-rendered
        }
    }

    private async Task HandleRunChanged()
    {
        if (_codeBase != null && _codeBase.Code != null)
        {
            var newRun = new CreateCodeRunRequest
            {
                CodeBaseId = _codeBase.Id,
                Code = _codeBase.Code
            };

            await CodeRunService.AddEntityAsync(newRun);
            await LoadDataAsync();
        }
    }

    private async Task HandleSaveChanged()
    {
        if (_codeBase != null)
        {
            var updateRequest = new UpdateCodeBaseRequest
            {
                Id = _codeBase.Id,
                Code = _codeBase.Code,
                // Map other necessary properties from _codeBase to updateRequest
            };

            await CodeBaseService.UpdateEntityAsync(CodeBaseId, updateRequest);
        }
    }


}
