@inject IJSRuntime JsRuntime
@using Microsoft.JSInterop

<script>
    window.setDotNetHelper = (dotNetHelper) => {
        window.dotNetHelper = dotNetHelper;
    };

    window.createMonacoEditor = (element, options) => {
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            window.monacoEditor = monaco.editor.create(element, options);

            window.monacoEditor.onDidChangeModelContent(() => {
                let code = window.monacoEditor.getValue();
                console.log('Editor content changed:', code);
                window.dotNetHelper.invokeMethodAsync('UpdateCode', code)
                    .then(() => console.log('UpdateCode invoked successfully'))
                    .catch(err => console.error('Error invoking UpdateCode:', err));
            });
        });
    };

</script>

<div id="editor" class="w-full border border-gray-300 mb-5" style="height: 400px" @ref="_editorElement"></div>

@code {
    [Parameter] public string InitialCode { get; set; } = string.Empty;
    [Parameter] public string PlatformLanguage { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnCodeChange { get; set; }

    private ElementReference _editorElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("createMonacoEditor", _editorElement, new
            {
                value = InitialCode,
                language = PlatformLanguage,
                theme = "vs"
            });
            await JsRuntime.InvokeVoidAsync("setDotNetHelper", dotNetRef); // Pass the reference to JS
        }
    }

    [JSInvokable("UpdateCode")]
    public async Task UpdateCode(string code)
    {
        await OnCodeChange.InvokeAsync(code);
    }

}