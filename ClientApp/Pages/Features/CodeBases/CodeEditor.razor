@inject IJSRuntime JsRuntime
@inject NotificationService NotificationService
@using ClientApp.Services
@using Helpers
@using Microsoft.JSInterop


<button class="primary-basic cursor-pointer text-center mt-2 mr-2 px-4 py-4 text-white font-bold rounded-lg float-right" @onclick="FormatCode">Format Code</button>
<div>
    <div id="editor" class="w-full border border-gray-300 mb-2 mt-1" style="height: 400px" @ref="_editorElement"></div>
</div>

@code {
    [Parameter] public string InitialCode { get; set; } = string.Empty;
    [Parameter] public string PlatformLanguage { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnCodeChange { get; set; }
    [Parameter] public EventCallback<string> OnCodeFormat { get; set; }

    private ElementReference _editorElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("createMonacoEditor", _editorElement, new
            {
                value = InitialCode,
                language = PlatformLanguage,
                theme = "vs"
            });
            await JsRuntime.InvokeVoidAsync("setDotNetHelper", dotNetRef);
            await Task.Delay(500);
            await JsRuntime.InvokeVoidAsync("highlightWords", CodeFormatHelper.HighlightedCommands);
        }
    }

    private async Task FormatCode()
    {
        try
        {
            var code = await JsRuntime.InvokeAsync<string>("getMonacoEditorValue");
            await OnCodeFormat.InvokeAsync(code);
        }
        catch (JSException ex)
        {
            NotificationService.ShowMessage($"JavaScript error: {ex.Message}");
        }
    }

    [JSInvokable("UpdateCode")]
    public async Task UpdateCode(string code)
    {
        await OnCodeChange.InvokeAsync(code);
        await JsRuntime.InvokeVoidAsync("highlightWords", CodeFormatHelper.HighlightedCommands);
    }

    [JSInvokable("FormatCode")]
    public async Task FormatCode(string code)
    {
        await OnCodeFormat.InvokeAsync(code);
        await JsRuntime.InvokeVoidAsync("highlightWords", CodeFormatHelper.HighlightedCommands);
    }

}