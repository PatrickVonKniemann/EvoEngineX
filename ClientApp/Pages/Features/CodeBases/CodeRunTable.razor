@using ExternalDomainEntities.CodeRunDto.Query
@using Generics.Enums
@using ClientApp.Services
@using ClientApp.Components.Common
@using ClientApp.Components.CodeRun
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject CodeRunService CodeRunService
@inject CodeBaseService CodeBaseService
@inject CodeRunStatusConnectorService RunStatusConnectorService
@inject IJSRuntime JSRuntime

@if (_isModalVisible && _selectedCodeRun != null)
{
    <ModalDialog>
        <button class="absolute top-0 right-0 p-2 text-gray-600" @onclick="CloseModal">
            <i class="fa fa-times"></i>
        </button>
        <h3 class="text-lg font-bold">Run Details</h3>
        <p>
            <strong>Run ID:</strong> @_selectedCodeRun.Id
        </p>
        <p>
            <strong>Code:</strong> @_selectedCodeRun.Code
        </p>
        <p>
            <strong>Status:</strong> @_selectedCodeRun.Status
        </p>
        <p>
            <strong>Start Time:</strong> @_selectedCodeRun.RunStart
        </p>
        <p>
            <strong>End Time:</strong> @_selectedCodeRun.RunFinish
        </p>

    </ModalDialog>
}


<h2 class="m-3 text-base font-semibold leading-7 text-indigo-600 max-w-fit">Previous runs:</h2>
<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 mb-10">
    <thead class="text-xs text-gray-700 uppercase text-center">
    <tr>
        <th scope="col" class="px-2 py-3">Run detail</th>
        <th scope="col" class="px-6 py-3">Status</th>
        <th scope="col" class="px-6 py-3">Start Time</th>
        <th scope="col" class="px-6 py-3">End Time</th>
        <th scope="col" class="px-6 py-3">Results</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var codeRun in CodeRuns.Items.Values)
    {
        <tr class="bg-white border-b text-gray-950 w-full text-center">
            <td class="px-1 py-1 font-medium whitespace-nowrap h-4 underline text-indigo-500 hover:text-indigo-700 visited:text-indigo-900">
                <a class="cursor-pointer" @onclick="() => ShowDetailsAsync(codeRun.Id.ToString())">
                    <i class="fa fa-eye text-indigo-600"></i>
                </a>
            </td>
            <td class="px-6 py-3 font-medium whitespace-nowrap">
                <RunStatusProgressBar ParentRunStatus=@codeRun.Status/>
            </td>
            <td class="px-6 py-3 font-medium whitespace-nowrap">@codeRun.RunStart</td>
            <td class="px-6 py-3 font-medium whitespace-nowrap">@codeRun.RunFinish</td>

            <td class="px-6 py-3 font-medium whitespace-nowrap">
                @if (codeRun.Results != null)
                {
                    <button @onclick="() => DownloadFile(codeRun.Id)">
                        <i class="fa fa-download"></i>
                    </button>
                }
                else
                {
                    <span>No Results</span>
                }
            </td>
        </tr>
    }
    </tbody>
</table>
f

@code {
    [Parameter] public required ReadCodeRunListByCodeBaseIdResponse CodeRuns { get; set; }

    private bool _isModalVisible = false;
    private ReadCodeRunResponse? _selectedCodeRun;

    private async Task ShowDetailsAsync(string codeRunId)
    {
        _selectedCodeRun = await CodeRunService.GetEntityAsync(codeRunId);
        _isModalVisible = true;
    }

    private Task CloseModal()
    {
        _isModalVisible = false;
        _selectedCodeRun = null;
        return Task.CompletedTask;
    }


    private string GetColorByStatus(RunStatus status) => status switch
    {
        RunStatus.Ready => "text-cyan-400",
        RunStatus.Running => "text-indigo-600",
        RunStatus.PausedRunning => "text-orange-500",
        RunStatus.PausedValidating => "text-orange-500",
        RunStatus.Done => "text-green-500",
        _ => throw new ArgumentOutOfRangeException(nameof(status), status, null)
    };

    protected override async Task OnInitializedAsync()
    {
        RunStatusConnectorService.OnRunStatusUpdated += HandleRunStatusUpdated;
        await RunStatusConnectorService.StartConnectionAsync();
    }


    private async void HandleRunStatusUpdated(string runId, string status)
    {
        var codeRun = CodeRuns.Items.Values.FirstOrDefault(cr => cr.Id.ToString() == runId);
        if (codeRun != null)
        {
            // Update the status locally
            codeRun.Status = Enum.Parse<RunStatus>(status);

            // If the status is Done, refetch the entire item
            if (codeRun.Status == RunStatus.Done)
            {
                // Fetch the updated details for the CodeRun
                var refetchCodeRun = await CodeRunService.GetEntityAsync(runId);

                if (refetchCodeRun != null)
                {
                    var selectedCodeRun = CodeRuns.Items.Values.FirstOrDefault(codeRunItem => codeRunItem.Id == codeRun.Id);
                    if (selectedCodeRun != null)
                    {
                        selectedCodeRun.RunFinish = refetchCodeRun.RunFinish;
                        selectedCodeRun.Status = refetchCodeRun.Status;
                        selectedCodeRun.Results = refetchCodeRun.Results;
                    }
                }
            }

            // Trigger UI update
            StateHasChanged();
        }
    }


    public async ValueTask DisposeAsync()
    {
        RunStatusConnectorService.OnRunStatusUpdated -= HandleRunStatusUpdated;
        await RunStatusConnectorService.StopConnectionAsync();
    }

    private async Task DownloadFile(Guid codeRunId)
    {
        try
        {
            Console.WriteLine($"Attempting to download file for CodeRunId: {codeRunId}");

            // Call the API to get the file bytes via CodeRunService
            var fileBytes = await CodeRunService.GetCodeRunFileAsync(codeRunId);

            if (fileBytes != null && fileBytes.Length > 0)
            {
                Console.WriteLine($"File successfully fetched for CodeRunId: {codeRunId}");

                // Convert the byte[] to a Base64 string (skipped in this case)
                var fileName = "result.csv"; // Adjust based on your requirements

                Console.WriteLine($"Calling JS function to download file with filename: {fileName}");

                // Call the JavaScript function to download the file using byte[] directly
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, fileBytes);

                Console.WriteLine("JS function invoked successfully");
            }
            else
            {
                Console.WriteLine("Error: File content is null or empty");
                throw new Exception("Error while downloading the file");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DownloadFile: {ex.Message}");
            throw new Exception("Error while downloading the file", ex);
        }
    }


}