# Use the official .NET 8 SDK image as the build image
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env
WORKDIR /app

# Log the current step
RUN echo "Step 1: Copying the csproj file and restoring dependencies"

# Copy the project files and restore dependencies as distinct layers
COPY ../CodeFormaterService/CodeFormaterService.csproj ./CodeFormaterService/
COPY ../ExternalDomainEntities/ExternalDomainEntities.csproj ./ExternalDomainEntities/
COPY ../Generics/Generics.csproj ./Generics/
COPY ../Common ./Common
COPY ../Helpers ./Helpers

RUN dotnet restore ./CodeFormaterService/CodeFormaterService.csproj

# Log the current step
RUN echo "Step 2: Copying the remaining source code and building the application"

# Copy the remaining source code and build the application
COPY ../CodeFormaterService/ ./CodeFormaterService/
COPY ../ExternalDomainEntities/ ./ExternalDomainEntities/
COPY ../Generics ./Generics
COPY ../Common ./Common
COPY ../Helpers ./Helpers

RUN dotnet publish ./CodeFormaterService/CodeFormaterService.csproj -c Release -o out

# Log the current step
RUN echo "Step 3: Using the official .NET runtime image as the base runtime image"

# Use the official .NET runtime image as the base runtime image
FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app

# Log the current step
RUN echo "Step 4: Copying the published output from the build environment"

COPY --from=build-env /app/out .

# Log the current step
RUN echo "Step 5: Setting the entry point for the application"

# Copy the entrypoint script and wait-for-it.sh
COPY ../Configs/dll_entrypoint_formater.sh /app/dll_entrypoint_formater.sh
COPY ../Configs/wait-for-it.sh /app/wait-for-it.sh
RUN chmod +x /app/dll_entrypoint_formater.sh
RUN chmod +x /app/wait-for-it.sh

# Use the script as the entrypoint
ENTRYPOINT ["/app/dll_entrypoint_formater.sh"]
