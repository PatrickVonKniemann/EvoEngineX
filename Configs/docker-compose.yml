#  docker compose -p eex-services --env-file ./docker-compose.env up --build -d
services:
  postgres-integration-testing:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_integration_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
      
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - development-network

  code-run-service:
    build:
      context: ..
      dockerfile: ./Configs/dockerfile-template
      args:
        SERVICE_NAME: ${SERVICE1_NAME}
    depends_on:
      - postgres
    environment:
      # Variable pass for script 
      SERVICE_NAME: ${SERVICE1_NAME}
      DB_HOST: postgres
      DB_NAME: ${SERVICE1_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5001:8080"
    networks:
      - development-network

  code-base-service:
    build:
      context: ..
      dockerfile: ./Configs/dockerfile-template
      args:
        SERVICE_NAME: ${SERVICE2_NAME}
    depends_on:
      - postgres
    environment:
      # Variable pass for script 
      SERVICE_NAME: ${SERVICE2_NAME}
      DB_HOST: postgres
      DB_NAME: ${SERVICE2_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5002:8080"
    networks:
      - development-network

  user-service:
    build:
      context: ..
      dockerfile: ./Configs/dockerfile-template
      args:
        SERVICE_NAME: ${SERVICE3_NAME}
    depends_on:
      - postgres
    environment:
      # Variable pass for script 
      SERVICE_NAME: ${SERVICE3_NAME}
      DB_HOST: postgres
      DB_NAME: ${SERVICE3_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5003:8080"
    networks:
      - development-network

  code-formater-service:
    build:
      context: ..
      dockerfile: ./Configs/dockerfile-formater
    ports:
      - "5004:8080"
    networks:
      - development-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
volumes:
  rabbitmq_data:
  postgres_data:
  postgres_integration_data:
    
networks:
  development-network:
    driver: bridge