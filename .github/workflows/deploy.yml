name: Build, Push Docker Image, and Deploy via Terraform

on:
  push:
    tags:
      - 'v*'  # Trigger this workflow when a version tag is pushed

jobs:
  build:
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get the version from the tag
        id: vars
        run: echo "APP_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.REPO_NAME }} || \
          aws ecr create-repository --repository-name ${{ secrets.REPO_NAME }}

      - name: Build Docker image and push to ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 --build-arg APP_VERSION=${{ env.APP_VERSION }} \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:${{ env.APP_VERSION }} \
            -f InfrastructureTestCode/Dockerfile InfrastructureTestCode --push

  terraform:
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set environment variables for Terraform and script
      - name: Set Shared Variables
        run: |
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=376129885232" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=${{ secrets.REPO_NAME }}-cluster" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_NAME=${{ secrets.REPO_NAME }}" >> $GITHUB_ENV
          echo "IAM_ROLE_NAME=ecsTaskExecutionRole" >> $GITHUB_ENV
          echo "LOAD_BALANCER_NAME=${{ secrets.REPO_NAME }}-lb" >> $GITHUB_ENV
          echo "TARGET_GROUP_NAME=${{ secrets.REPO_NAME }}-tg" >> $GITHUB_ENV
          echo "SERVICE_GROUP_NAME="ecs-service-sg" >> $GITHUB_ENV

      # Run the script to clean up old resources
      - name: Destroy old resources
        run: |
          chmod +x MulticloudInfra/aws/delete_resources.sh
          ./MulticloudInfra/aws/delete_resources.sh $ECS_CLUSTER_NAME $ECR_REPOSITORY_NAME $IAM_ROLE_NAME $LOAD_BALANCER_NAME $TARGET_GROUP_NAME $AWS_REGION $AWS_ACCOUNT_ID $SERVICE_GROUP_NAME
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Pass AWS credentials and shared variables to Terraform
      - name: Initialize Terraform AWS
        working-directory: MulticloudInfra/aws  # Adjust path to your Terraform files
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform init -upgrade

      # Plan Terraform
      - name: Plan Terraform AWS
        working-directory: MulticloudInfra/aws  # Adjust path to your Terraform files
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform plan -out=tfplan

      # Apply Terraform Changes
      - name: Apply Terraform Changes
        working-directory: MulticloudInfra/aws  # Adjust path to your Terraform files
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: terraform apply -auto-approve tfplan
