name: Build, Push Docker Image, and Deploy via Terraform

on:
  push:
    tags:
      - 'v*'  # Trigger this workflow when a version tag is pushed

jobs:
  build:
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: Print secrets (for debugging)
        run: |
          echo "AWS Access Key ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS Secret Access Key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "AWS Account ID: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "Region: ${{ secrets.REGION }}"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get the version from the tag
        id: vars
        run: echo "APP_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names test-api || \
          aws ecr create-repository --repository-name test-api

      - name: Build Docker image and push to ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 --build-arg APP_VERSION=${{ env.APP_VERSION }} \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com/test-api:${{ env.APP_VERSION }} \
            -f InfrastructureTestCode/Dockerfile InfrastructureTestCode --push

  terraform:
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Configure AWS credentials for Terraform
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      # Pass AWS credentials as environment variables to Terraform
      - name: Initialize Terraform AWS
        working-directory: MulticloudInfra/aws  # Adjust path to your Terraform files
        run: terraform init

      - name: Import Existing Resources
        working-directory: MulticloudInfra/aws
        run: |
          terraform import aws_ecs_cluster.test_api_cluster test-api-cluster
          terraform import aws_ecr_repository.test_api arn:aws:ecr:${{ secrets.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:repository/test-api
          terraform import aws_ecs_task_definition.test_api_task test-api
          terraform import aws_ecs_service.test_api_service arn:aws:ecs:${{ secrets.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/test-api-service
          terraform import aws_lb.test_api_lb arn:aws:elasticloadbalancing:${{ secrets.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:loadbalancer/app/test-api-lb/<your-loadbalancer-id>
          terraform import aws_lb_target_group.test_api_target_group arn:aws:elasticloadbalancing:${{ secrets.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/test-api-tg/<your-targetgroup-id>
          terraform import aws_lb_listener.test_api_listener arn:aws:elasticloadbalancing:${{ secrets.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:listener/app/test-api-lb/<your-listener-id>

      - name: Plan Terraform AWS
        working-directory: MulticloudInfra/aws  # Adjust path to your Terraform files
        run: terraform plan -out=tfplan

      - name: Apply Terraform Changes
        working-directory: MulticloudInfra/aws  # Adjust path to your Terraform files
        run: terraform apply -auto-approve tfplan
